server:
  port: 8080

spring:
  profiles:
    active: dev
  application:
    name: secondhand-trade
  datasource:
    # 数据库配置，留空或使用占位符，以便其他开发者知道需要配置哪些字段
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/your_database
    username: your_username
    password: your_password
  data:
    redis:
      host: localhost
      port: 6379
#      password: your_password # 如果你的Redis有密码，请取消注释并修改
  rabbitmq:
    host: your_rabbitmq_host # RabbitMQ 服务器地址
    port: 5672 # RabbitMQ 服务端口
    username: your_username # 登录用户名
    password: your_password # 登录密码
    virtual-host: / # 虚拟主机
    # 开启 Publisher Confirms 机制，确保消息可靠投递到 Broker
    publisher-confirm-type: correlated
    publisher-returns: true
    listener:
      simple:
        # 设置消费者手动确认消息
        acknowledge-mode: manual
        retry:
          enabled: true      # 开启监听容器连接重试
          max-attempts: 10   # 最大重试次数 (可以根据需要调整)
          initial-interval: 2s # 初始重试间隔 (例如2秒)
          multiplier: 1.5    # 间隔乘数，实现退避策略 (可选)
          max-interval: 30s  # 最大重试间隔 (可选)
  #  ===================  Spring Session 配置 ===================
  session:
    store-type: redis # 指定使用 Redis 存储 Session
    redis:
      namespace: "spring:session:secondhand" # 添加命名空间前缀，防止多项目共用Redis时冲突
    timeout: 30m

  # =================== SSO 客户端和资源服务器核心配置 ===================
  security:
    oauth2:
      client:
        # 注册一个名为 'auth-centre-client' 的服务提供商
        provider:
          auth-centre-client:
            # 认证中心的地址
            issuer-uri: http://localhost:8081
        # 注册一个名为 'secondhand-client' 的客户端
        registration:
          secondhand-client:
            provider: auth-centre-client # 使用上面定义的服务提供商
            client-id: secondhand-client # 必须与认证中心注册的clientId一致
            client-secret: secret      # 必须与认证中心注册的clientSecret一致
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            scope: openid, profile, read, write
            # 登录成功后，认证中心将用户重定向回此地址
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
      # 配置资源服务器，用于验证收到的JWT令牌
      resourceserver:
        jwt:
          # 指向认证中心的公钥端点，用于获取验证签名所需的公钥
          jwk-set-uri: http://localhost:8081/oauth2/jwks
          issuer-uri: http://localhost:8081


#secondhandtrade:
#  jwt:
#    # JWT 密钥配置，使用占位符
#    # 设置jwt签名加密时使用的秘钥
#    admin-secret-key: your-admin-jwt-secret-key
#    # 设置jwt过期时间
#    admin-ttl: 7200000
#    # 设置前端传递过来的令牌名称
#    admin-token-name: token
#
#    user-secret-key: your-user-jwt-secret-key
#    user-ttl: 7200000
#    user-token-name: authentication

aliyun:
  oss:
    # 阿里云 OSS 配置，使用占位符
    endpoint: your_oss_endpoint # Bucket所在地域的Endpoint
    access-key-id: your_access_key_id # AccessKey ID
    access-key-secret: your_access_key_secret # AccessKey Secret
    bucket-name: your_bucket_name # Bucket名称


mybatis:
  #mapper配置文件
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.yw.secondhandtrade.pojo.entity,com.yw.secondhandtrade.pojo.vo,com.yw.secondhandtrade.pojo.dto
  configuration:
    #开启驼峰命名
    map-underscore-to-camel-case: true


# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.yw.secondhandtrade.server

# knife4j的增强配置，不需要增强可以不配
knife4j:
  enable: true
  setting:
    language: zh_cn

pagehelper:
  helper-dialect: mysql
  reasonable: true
  support-methods-arguments: true
  params: count=countSql

logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
